package stats

import "core:fmt"
import "core:math"
import "core:os"
import "core:strconv"
import "core:slice"
import "core:strings"
import "vendor:raylib"
import "core:encoding/csv"

FONT_SIZE :: 14

APR_1ST_2020 :: 323_395_200
MAY_17TH_2021 :: 358_905_600

main :: proc()
{
	SCREEN_WIDTH :: 1712
	SCREEN_HEIGHT :: 800

	using main
	using raylib

	SetConfigFlags({.WINDOW_RESIZABLE})

	SetTraceLogLevel(TraceLogLevel.WARNING)

	InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Stats")
	defer CloseWindow()

    SetTargetFPS(60)

	font := LoadFontEx("roboto-bold.ttf", FONT_SIZE, nil, 0)

	chart : Chart

	chart.candles[Timeframe.MINUTE].offset = BYBIT_ORIGIN_MINUTE_TIMESTAMP
	chart.candles[Timeframe.MINUTE].candles = LoadMinuteCandles()
	defer delete(chart.candles[Timeframe.MINUTE].candles)

	// Init chart.candles offsets and timeframes
	{
		prevTimeframe := Timeframe.MINUTE
		for timeframe in Timeframe.MINUTE_5 ..= Timeframe.WEEK
		{
			chart.candles[timeframe].offset = Candle_FloorTimestamp(chart.candles[prevTimeframe].offset, timeframe)
			chart.candles[timeframe].timeframe = timeframe

			prevTimeframe = timeframe
		}

		monthlyIncrements := MONTHLY_INCREMENTS

		fourYearTimestamp := chart.candles[prevTimeframe].offset % FOUR_YEARS

		fourYearIndex := 47

		for fourYearTimestamp < monthlyIncrements[fourYearIndex]
		{
			fourYearIndex -= 1
		}

		chart.candles[Timeframe.MONTH].offset = chart.candles[prevTimeframe].offset - fourYearTimestamp + monthlyIncrements[fourYearIndex]
		chart.candles[Timeframe.MONTH].timeframe = Timeframe.MONTH
	}

	chart.hourVolumeProfilePool = LoadHourVolumeProfiles()

	Chart_CreateHTFCandles(&chart)

	volume := HalfHourCandleWeek_Volume(chart, MAY_17TH_2021)
	priceMovement := HalfHourCandleWeek_PriceMovement(chart, MAY_17TH_2021)
	priceMovementAbs := HalfHourCandleWeek_PriceMovement(chart, MAY_17TH_2021, true)
	closeOffset := HalfHourCandleWeek_CloseOffset(chart, MAY_17TH_2021)
	range := HalfHourCandleWeek_Range(chart, MAY_17TH_2021)
	high := HalfHourCandleWeek_High(chart, MAY_17TH_2021)

	dayByWeek := DayByWeek_HighLow(chart)

	cameraPosY : f32 = 0
	dragging := false

	wickData := WickPositions(chart)

	SMALL_SPAN :: 300
	MED_SPAN :: 450
	BIG_SPAN :: 600

	lowTotal := 0
	highTotal := 0

	for i in 0 ..< 1000
	{
		lowTotal += wickData.lowBuckets[i]
		highTotal += wickData.highBuckets[i]
	}

	smallHighTotal := 0
	medHighTotal := 0
	bigHighTotal := 0

	smallLowTotal := 0
	medLowTotal := 0
	bigLowTotal := 0

	smallHighBestTotal := 0
	smallHighBestIndex := 0
	medHighBestTotal := 0
	medHighBestIndex := 0
	bigHighBestTotal := 0
	bigHighBestIndex := 0

	smallLowBestTotal := 0
	smallLowBestIndex := 0
	medLowBestTotal := 0
	medLowBestIndex := 0
	bigLowBestTotal := 0
	bigLowBestIndex := 0

	for i in 0 ..< SMALL_SPAN
	{
		smallHighTotal += wickData.highBuckets[i]
		smallLowTotal += wickData.lowBuckets[i]
		medHighTotal += wickData.highBuckets[i]
		medLowTotal += wickData.lowBuckets[i]
		bigHighTotal += wickData.highBuckets[i]
		bigLowTotal += wickData.lowBuckets[i]
	}

	for i in SMALL_SPAN ..< MED_SPAN
	{
		medHighTotal += wickData.highBuckets[i]
		medLowTotal += wickData.lowBuckets[i]
		bigHighTotal += wickData.highBuckets[i]
		bigLowTotal += wickData.lowBuckets[i]
	}

	for i in MED_SPAN ..< BIG_SPAN
	{
		bigHighTotal += wickData.highBuckets[i]
		bigLowTotal += wickData.lowBuckets[i]
	}

	smallHighBestTotal = smallHighTotal
	medHighBestTotal = medHighTotal
	bigHighBestTotal = bigHighTotal

	smallLowBestTotal = smallLowTotal
	medLowBestTotal = medLowTotal
	bigLowBestTotal = bigLowTotal

	for i in 0 ..< 1000
	{
		smallHighTotal += wickData.highBuckets[(i + SMALL_SPAN) % 1000] - wickData.highBuckets[i]
		medHighTotal += wickData.highBuckets[(i + MED_SPAN) % 1000] - wickData.highBuckets[i]
		bigHighTotal += wickData.highBuckets[(i + BIG_SPAN) % 1000] - wickData.highBuckets[i]

		smallLowTotal += wickData.lowBuckets[(i + SMALL_SPAN) % 1000] - wickData.lowBuckets[i]
		medLowTotal += wickData.lowBuckets[(i + MED_SPAN) % 1000] - wickData.lowBuckets[i]
		bigLowTotal += wickData.lowBuckets[(i + BIG_SPAN) % 1000] - wickData.lowBuckets[i]

		if smallHighBestTotal < smallHighTotal
		{
			smallHighBestTotal = smallHighTotal
			smallHighBestIndex = i
		}

		if medHighBestTotal < medHighTotal
		{
			medHighBestTotal = medHighTotal
			medHighBestIndex = i
		}

		if bigHighBestTotal < bigHighTotal
		{
			bigHighBestTotal = bigHighTotal
			bigHighBestIndex = i
		}

		if smallLowBestTotal < smallLowTotal
		{
			smallLowBestTotal = smallLowTotal
			smallLowBestIndex = i
		}

		if medLowBestTotal < medLowTotal
		{
			medLowBestTotal = medLowTotal
			medLowBestIndex = i
		}

		if bigLowBestTotal < bigLowTotal
		{
			bigLowBestTotal = bigLowTotal
			bigLowBestIndex = i
		}
	}

	fmt.println(smallLowBestIndex, "- 0.3 of price,", f32(smallLowBestTotal) / f32(lowTotal), "of lows, ratio:", f32(smallLowBestTotal) / f32(lowTotal) / 0.3)
	fmt.println(medLowBestIndex, "- 0.45 of price,", f32(medLowBestTotal) / f32(lowTotal), "of lows, ratio:", f32(medLowBestTotal) / f32(lowTotal) / 0.45)
	fmt.println(bigLowBestIndex, "- 0.6 of price,", f32(bigLowBestTotal) / f32(lowTotal), "of lows, ratio:", f32(bigLowBestTotal) / f32(lowTotal) / 0.6)
	fmt.println(smallHighBestIndex, "- 0.3 of price,", f32(smallHighBestTotal) / f32(highTotal), "of highs, ratio:", f32(smallHighBestTotal) / f32(highTotal) / 0.3)
	fmt.println(medHighBestIndex, "- 0.45 of price,", f32(medHighBestTotal) / f32(highTotal), "of highs, ratio:", f32(medHighBestTotal) / f32(highTotal) / 0.45)
	fmt.println(bigHighBestIndex, "- 0.6 of price,", f32(bigHighBestTotal) / f32(highTotal), "of highs, ratio:", f32(bigHighBestTotal) / f32(highTotal) / 0.6)

	// UPDATE <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
	for !WindowShouldClose()
	{
		// Mouse handling
		if IsMouseButtonPressed(.LEFT)
		{
			dragging = !IsKeyDown(KeyboardKey.LEFT_SHIFT)
		}

		if IsMouseButtonReleased(.LEFT)
		{
			dragging = false
		}

		if dragging
		{
			cameraPosY -= GetMouseDelta().y
		}

		cameraPosY -= GetMouseWheelMove() * 32

		cameraPosY = math.max(cameraPosY, 0)

        BeginDrawing()

		ClearBackground(BLACK)

		posY : f32 = -cameraPosY
		chartOffset : f32 = 32
		chartHeight : f32 = 400

		if posY + chartHeight > 0 && posY < SCREEN_HEIGHT
		{
			DrawHalfHourCandleWeek(volume, font, chartOffset, posY, SCREEN_WIDTH - chartOffset, chartHeight)
		}

		DrawLine(0, i32(posY + chartHeight), SCREEN_WIDTH, i32(posY + chartHeight), WHITE)
		posY += chartHeight + 1

		if posY + chartHeight > 0 && posY < SCREEN_HEIGHT
		{
			DrawHalfHourCandleWeek(priceMovement, font, chartOffset, posY, SCREEN_WIDTH - chartOffset, chartHeight)
		}

		DrawLine(0, i32(posY + chartHeight), SCREEN_WIDTH, i32(posY + chartHeight), WHITE)
		posY += chartHeight + 1

		if posY + chartHeight > 0 && posY < SCREEN_HEIGHT
		{
			DrawHalfHourCandleWeek(priceMovementAbs, font, chartOffset, posY, SCREEN_WIDTH - chartOffset, chartHeight)
		}

		DrawLine(0, i32(posY + chartHeight), SCREEN_WIDTH, i32(posY + chartHeight), WHITE)
		posY += chartHeight + 1

		if posY + chartHeight > 0 && posY < SCREEN_HEIGHT
		{
			DrawHalfHourCandleWeek(closeOffset, font, chartOffset, posY, SCREEN_WIDTH - chartOffset, chartHeight)
		}

		DrawLine(0, i32(posY + chartHeight), SCREEN_WIDTH, i32(posY + chartHeight), WHITE)
		posY += chartHeight + 1

		if posY + chartHeight > 0 && posY < SCREEN_HEIGHT
		{
			DrawHalfHourCandleWeek(range, font, chartOffset, posY, SCREEN_WIDTH - chartOffset, chartHeight)
		}

		DrawLine(0, i32(posY + chartHeight), SCREEN_WIDTH, i32(posY + chartHeight), WHITE)
		posY += chartHeight + 1

		if posY + chartHeight > 0 && posY < SCREEN_HEIGHT
		{
			DrawHalfHourCandleWeek(high, font, chartOffset, posY, SCREEN_WIDTH - chartOffset, chartHeight)
		}

		DrawLine(0, i32(posY + chartHeight), SCREEN_WIDTH, i32(posY + chartHeight), WHITE)
		posY += chartHeight + 1

		if posY + chartHeight > 0 && posY < SCREEN_HEIGHT
		{
			DrawDayByWeek(dayByWeek, font, chartOffset, posY, SCREEN_WIDTH - chartOffset, chartHeight)

			range := f32(dayByWeek.highestTotalCount) / f32(dayByWeek.totalEntries)

			labelValue := 0.05

			labelHeight := (1 - (f32(labelValue) / range)) * chartHeight

			textBuffer : [16]u8

			for labelHeight > 0
			{
				if labelHeight < chartHeight
				{
					fmt.bprintf(textBuffer[:], "%.2f\x00", labelValue)
					textDimensions := MeasureTextEx(font, cstring(&textBuffer[0]), FONT_SIZE, 0)
					DrawTextEx(font, cstring(&textBuffer[0]), {chartOffset - textDimensions[0] - 4, posY + labelHeight - textDimensions[1] / 2}, FONT_SIZE, 0, WHITE)
					lineColor := WHITE
					lineColor.a = 127
					DrawLine(i32(chartOffset), i32(posY + labelHeight), SCREEN_WIDTH, i32(posY + labelHeight), lineColor)
				}

				labelValue += 0.05
				labelHeight = (1 - ((f32(labelValue)) / range)) * chartHeight
			}
		}

		DrawLine(0, i32(posY + chartHeight), SCREEN_WIDTH, i32(posY + chartHeight), WHITE)
		posY += chartHeight + 1

		barWidth := f32(SCREEN_WIDTH) / 1000

		highColor := GREEN
		highColor.a = 50

		lowColor := RED
		lowColor.a = 50

		DrawRectangle(i32(barWidth * f32(smallHighBestIndex)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), highColor)
		DrawRectangle(i32(barWidth * f32(medHighBestIndex)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), highColor)
		DrawRectangle(i32(barWidth * f32(bigHighBestIndex)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), highColor)

		// Overflow
		DrawRectangle(i32(barWidth * f32(smallHighBestIndex - 1000)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), highColor)
		DrawRectangle(i32(barWidth * f32(medHighBestIndex - 1000)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), highColor)
		DrawRectangle(i32(barWidth * f32(bigHighBestIndex - 1000)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), highColor)

		DrawRectangle(i32(barWidth * f32(smallLowBestIndex)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), lowColor)
		DrawRectangle(i32(barWidth * f32(medLowBestIndex)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), lowColor)
		DrawRectangle(i32(barWidth * f32(bigLowBestIndex)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), lowColor)

		// Overflow
		DrawRectangle(i32(barWidth * f32(smallLowBestIndex - 1000)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), lowColor)
		DrawRectangle(i32(barWidth * f32(medLowBestIndex - 1000)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), lowColor)
		DrawRectangle(i32(barWidth * f32(bigLowBestIndex - 1000)), i32(posY), i32(SMALL_SPAN * barWidth), i32(chartHeight), lowColor)

		if posY + chartHeight > 0 && posY < SCREEN_HEIGHT
		{
			for i in 0 ..< 1000
			{
				highY := (1 - f32(wickData.lowBuckets[i]) / f32(wickData.combinedMax)) * chartHeight
				lowY := (1 - f32(wickData.combinedBuckets[i]) / f32(wickData.combinedMax)) * chartHeight

				DrawRectangle(i32(chartOffset + f32(i) * barWidth), i32(posY + lowY), i32(barWidth), i32(chartHeight - lowY), GREEN)
				DrawRectangle(i32(chartOffset + f32(i) * barWidth), i32(posY + highY), i32(barWidth), i32(chartHeight - highY), RED)
			}

			labelValue := 0.05

			labelHeight := (1 - f32(labelValue)) * chartHeight

			textBuffer : [16]u8

			for labelHeight > 0
			{
				if labelHeight < chartHeight
				{
					fmt.bprintf(textBuffer[:], "%.2f\x00", labelValue)
					textDimensions := MeasureTextEx(font, cstring(&textBuffer[0]), FONT_SIZE, 0)
					DrawTextEx(font, cstring(&textBuffer[0]), {chartOffset - textDimensions[0] - 4, posY + labelHeight - textDimensions[1] / 2}, FONT_SIZE, 0, WHITE)
					lineColor := WHITE
					lineColor.a = 127
					DrawLine(i32(chartOffset), i32(posY + labelHeight), SCREEN_WIDTH, i32(posY + labelHeight), lineColor)
				}

				labelValue += 0.05
				labelHeight = (1 - f32(labelValue)) * chartHeight
			}
		}

        EndDrawing()
	}
}
